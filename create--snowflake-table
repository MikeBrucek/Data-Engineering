// Creates a staging location in Snowflake pointing to a specific bucket/folder in S3
CREATE OR REPLACE STAGE ML_PREP_STAGE
URL = 's3://et-bluewhale-us-east-1/dbs/mbrucek/'
STORAGE_INTEGRATION = S3_US_EAST_1_INT


-- Method 1:  Scan and auto format

// Creates a file format for reading CSV files with a header row and enclosing string fields with double quotes
CREATE OR REPLACE FILE FORMAT ml_csv
  TYPE = csv
  PARSE_HEADER = true
FIELD_OPTIONALLY_ENCLOSED_BY='"';

// Creates a table "shell" which has the data types and column names
create or replace table ML.ML_PREP.TABLE_1_NAME  -- change table name here
  using template (
    select array_agg(object_construct(*))
      from table(
        infer_schema(
          location=>'@ML_PREP_STAGE/median_income/Median_Income_ByZip_2019_Census.csv', --you can specify a specific file or just the folder location
          file_format=>'ml_csv'  -- use the file format you created above
        )
      ));

// Load the records from the CSV file into the new table; it will tell you if any records errored out 
// Change the table name here too
COPY into ML.ML_PREP.TABLE_1_NAME from '@ML_PREP_STAGE/median_income/Median_Income_ByZip_2019_Census.csv' FILE_FORMAT = (FORMAT_NAME= 'ml_csv') MATCH_BY_COLUMN_NAME=CASE_INSENSITIVE;


-- Method 2:  Manual Entry

// This is the other method for reading data from a CSV as an EXTERNAL TABLE
// It requires specifying the data types and column names
create or replace external table ML.ML_PREP.DEMO_TABLE(
	MEDIAN_HOUSEHOLD_INCOME NUMBER(38,0) AS (TO_NUMBER(GET(VALUE, 'c1'))),
	STATE VARCHAR(16777216) AS (CAST(GET(VALUE, 'c2') AS VARCHAR(16777216))),
    ZIP_CODE VARCHAR(16777216) AS (CAST(GET(VALUE, 'c3') AS VARCHAR(16777216))),
    STATE_NAME VARCHAR(16777216) AS (CAST(GET(VALUE, 'c4') AS VARCHAR(16777216))),
    Z_SCORE DOUBLE AS (TO_DOUBLE(GET(VALUE, 'c5')))
    )
location=@ML_PREP_STAGE/median_income/
file_format=(TYPE=CSV FIELD_DELIMITER = ',' FIELD_OPTIONALLY_ENCLOSED_BY='"' SKIP_HEADER = 1 NULL_IF=())
AUTO_REFRESH=true
;

// After loading the records, you can change datatypes when doing queries this way (helpful for calculations)
// Creating a VIEW is helpful if you don't want to do this everytime you query the data set.
-- CREATE OR REPLACE ML.ML_PREP.TABLE_1_VIEW AS
SELECT 
        "median_household_income"::NUMBER "median_household_income",
        * EXCLUDE ("median_household_income", "z_score"), -- select all the columns excluding the two that are being converted to a different datatype
        "z_score"::DOUBLE "z_score"
FROM ML.ML_PREP.TABLE_1_NAME;

